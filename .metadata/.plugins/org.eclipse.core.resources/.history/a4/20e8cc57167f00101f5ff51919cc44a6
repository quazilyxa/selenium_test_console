import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.*;
import org.testng.ITestResult;
import java.io.File;
import java.util.List;
import java.time.Duration;
import org.apache.commons.io.FileUtils;
import java.util.concurrent.ThreadLocalRandom;
import org.openqa.selenium.Keys;
import org.openqa.selenium.interactions.Actions;

public class testAppSettings {
    
    private WebDriver driver;
    private WebDriverWait wait;
    private Actions actions;
    private JavascriptExecutor js;
    
    // Constants
    private static final String BASE_URL = "https://test-v2-panel.lyxa.ai/auth/sign-in?returnTo=%2F&loginAs=admin";
    private static final String EMAIL = "nour@gmail.com";
    private static final String PASSWORD = "Nour1234@";
    private static final String CHROME_DRIVER_PATH = "C:\\Users\\quazi\\Downloads\\Automation web\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe";
    
    // Test data storage
    private String addedUnit;
    private String addedRiderArea;
    private int addedMonthlyTarget;
    private int addedRewardPrize;

    @BeforeClass
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", CHROME_DRIVER_PATH);
        
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--incognito");
        options.addArguments("--disable-notifications");
        options.addArguments("--disable-popup-blocking");
        options.addArguments("--disable-web-security");
        options.addArguments("--allow-running-insecure-content");
        
        driver = new ChromeDriver(options);
        driver.manage().window().maximize();
        wait = new WebDriverWait(driver, Duration.ofSeconds(15));
        actions = new Actions(driver);
        js = (JavascriptExecutor) driver;
        
        // Create screenshots directory
        new File("screenshots").mkdirs();
        System.out.println("Test environment initialized successfully");
    }

    @AfterClass
    public void tearDown() {
        if (driver != null) {
            driver.quit();
            System.out.println("Test environment cleaned up");
        }
    }

    // Utility Methods
    private void takeScreenshot(String filename) {
        try {
            File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            FileUtils.copyFile(screenshot, new File("screenshots/" + filename));
            System.out.println("Screenshot saved: " + filename);
        } catch (Exception e) {
            System.out.println("Failed to take screenshot: " + e.getMessage());
        }
    }

    private WebElement findElement(By... locators) {
        for (By locator : locators) {
            try {
                WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(locator));
                if (element.isDisplayed()) {
                    return element;
                }
            } catch (TimeoutException e) {
                continue;
            }
        }
        throw new NoSuchElementException("None of the provided locators found a visible element");
    }

    private void clearAndType(WebElement element, String text) {
        element.clear();
        element.sendKeys(text);
    }

    private void scrollToElement(WebElement element) {
        js.executeScript("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", element);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private void waitAndClick(WebElement element) {
        wait.until(ExpectedConditions.elementToBeClickable(element));
        actions.moveToElement(element).click().perform();
    }

    // Test Methods
    @Test(priority = 1, description = "Navigate to login page and verify elements")
    public void testNavigateToLoginPage() throws InterruptedException {
        System.out.println("Test: Navigate to Login Page");
        
        driver.get(BASE_URL);
        Thread.sleep(2000);
        takeScreenshot("01_login_page_loaded.png");
        
        WebElement emailField = wait.until(ExpectedConditions.presenceOfElementLocated(By.name("email")));
        WebElement passwordField = driver.findElement(By.name("password"));
        WebElement loginButton = driver.findElement(By.cssSelector("button[type='submit']"));
        
        Assert.assertTrue(emailField.isDisplayed(), "Email field should be visible");
        Assert.assertTrue(passwordField.isDisplayed(), "Password field should be visible");
        Assert.assertTrue(loginButton.isDisplayed(), "Login button should be visible");
        
        System.out.println("✓ Login page loaded successfully");
    }

    @Test(priority = 2, dependsOnMethods = "testNavigateToLoginPage", description = "Login with valid credentials")
    public void testValidLogin() throws InterruptedException {
        System.out.println("Test: Valid Login");
        
        WebElement emailField = findElement(
            By.name("email"),
            By.xpath("//input[contains(@placeholder,'email') or contains(@placeholder,'Email')]"),
            By.xpath("//input[@type='text' or @type='email']")
        );
        clearAndType(emailField, EMAIL);
        
        WebElement passwordField = findElement(
            By.name("password"),
            By.id("password"),
            By.xpath("//input[@type='password']")
        );
        clearAndType(passwordField, PASSWORD);
        
        takeScreenshot("02_credentials_entered.png");
        
        WebElement loginButton = findElement(
            By.cssSelector("button[type='submit']"),
            By.xpath("//button[contains(text(),'Sign') or contains(text(),'Login')]")
        );
        loginButton.click();
        
        Thread.sleep(3000); // Wait for login process
        
        boolean loginSuccessful = wait.until(ExpectedConditions.or(
            ExpectedConditions.urlContains("dashboard"),
            ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[contains(text(),'Dashboard')]")),
            ExpectedConditions.not(ExpectedConditions.urlContains("sign-in"))
        ));
        
        takeScreenshot("03_login_success.png");
        Assert.assertTrue(loginSuccessful, "Login should be successful");
        System.out.println("✓ Login successful");
    }

    @Test(priority = 3, dependsOnMethods = "testValidLogin", description = "Open navigation menu")
    public void testOpenNavigationMenu() throws InterruptedException {
        System.out.println("Test: Open Navigation Menu");
        
        WebElement menuButton = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("(//button[contains(@class,'MuiIconButton-root')])[1]")
        ));
        menuButton.click();
        Thread.sleep(2000);
        takeScreenshot("04_menu_opened.png");
        
        WebElement settingsOption = wait.until(ExpectedConditions.visibilityOfElementLocated(
            By.xpath("//span[@class='mnl__nav__item__title MuiBox-root css-0' and text()='Settings']")
        ));
        
        Assert.assertTrue(settingsOption.isDisplayed(), "Settings menu item should be visible");
        System.out.println("✓ Navigation menu opened successfully");
    }

    @Test(priority = 4, dependsOnMethods = "testOpenNavigationMenu", description = "Navigate to Settings")
    public void testNavigateToSettings() throws InterruptedException {
        System.out.println("Test: Navigate to Settings");
        
        WebElement settingsMenuItem = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("//span[@class='mnl__nav__item__title MuiBox-root css-0' and text()='Settings']")
        ));
        settingsMenuItem.click();
        
        Thread.sleep(2000);
        takeScreenshot("05_settings_page.png");
        
        String currentUrl = driver.getCurrentUrl();
        Assert.assertTrue(currentUrl.contains("settings") || 
                         driver.getPageSource().contains("Settings"), 
                         "Should navigate to settings page");
        
        System.out.println("✓ Successfully navigated to Settings");
    }

    @Test(priority = 5, dependsOnMethods = "testNavigateToSettings", description = "Open App Settings")
    public void testOpenAppSettings() throws InterruptedException {
        System.out.println("Test: Open App Settings");
        
        WebElement appSettings = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("//div[@class='MuiBox-root css-171onha' and text()='App Settings']")
        ));
        appSettings.click();
        
        Thread.sleep(2000);
        takeScreenshot("06_app_settings_opened.png");
        
        WebElement configurationsTab = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("//button[@role='tab' and contains(text(),'Configurations')]")
        ));
        
        Assert.assertTrue(configurationsTab.isDisplayed(), "Configurations tab should be visible");
        System.out.println("✓ App Settings opened successfully");
    }

    @Test(priority = 6, dependsOnMethods = "testOpenAppSettings", description = "Update Business Development settings")
    public void testUpdateBusinessDevelopmentSettings() throws InterruptedException {
        System.out.println("Test: Update Business Development Settings");
        
        // Update Monthly Target
        WebElement monthlyTargetInput = wait.until(ExpectedConditions.visibilityOfElementLocated(
            By.name("businessDevelopmentSetting.monthlyShopTarget")
        ));
        
        addedMonthlyTarget = ThreadLocalRandom.current().nextInt(1, 50);
        clearAndType(monthlyTargetInput, String.valueOf(addedMonthlyTarget));
        Thread.sleep(1000);
        
        // Update Reward Prize
        WebElement rewardPrizeInput = wait.until(ExpectedConditions.visibilityOfElementLocated(
            By.name("businessDevelopmentSetting.monthlyRewardPrize")
        ));
        
        addedRewardPrize = ThreadLocalRandom.current().nextInt(1, 100);
        clearAndType(rewardPrizeInput, String.valueOf(addedRewardPrize));
        
        takeScreenshot("07_business_dev_updated.png");
        System.out.println("✓ Business Development settings updated - Target: " + addedMonthlyTarget + ", Prize: " + addedRewardPrize);
    }

    @Test(priority = 7, dependsOnMethods = "testUpdateBusinessDevelopmentSettings", description = "Add and verify new unit")
    public void testAddNewUnit() throws InterruptedException {
        System.out.println("Test: Add New Unit");
        
        WebElement addButton = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("//button[contains(text(),'+ Add')]")
        ));
        addButton.click();
        Thread.sleep(1000);
        
        WebElement unitInput = wait.until(ExpectedConditions.visibilityOfElementLocated(
            By.xpath("//fieldset[.//span[text()='Enter Unit']]/preceding-sibling::input")
        ));
        
        // Generate random unit name
        addedUnit = "unit" + ThreadLocalRandom.current().nextInt(100, 999);
        unitInput.clear();
        unitInput.sendKeys(addedUnit);
        unitInput.sendKeys(Keys.ENTER);
        
        Thread.sleep(2000);
        takeScreenshot("08_unit_added.png");
        System.out.println("✓ New unit added: " + addedUnit);
    }

    @Test(priority = 8, dependsOnMethods = "testAddNewUnit", description = "Add rider search area")
    public void testAddRiderSearchArea() throws InterruptedException {
        System.out.println("Test: Add Rider Search Area");
        
        js.executeScript("window.scrollBy(0, 300);");
        Thread.sleep(1000);
        
        WebElement riderAddButton = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("//h6[text()='Rider Search Area (km)']/following-sibling::button")
        ));
        riderAddButton.click();
        Thread.sleep(1000);
        
        WebElement riderSearchInput = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("//h6[text()='Rider Search Area (km)']/following::input[@placeholder='Add Rider Search Area' or @placeholder='Enter number'][1]")
        ));
        riderSearchInput.click();
        
        int newRiderValue = ThreadLocalRandom.current().nextInt(3000, 5001);
        addedRiderArea = String.valueOf(newRiderValue);
        riderSearchInput.clear();
        riderSearchInput.sendKeys(addedRiderArea + Keys.ENTER);
        
        Thread.sleep(2000);
        takeScreenshot("09_rider_area_added.png");
        System.out.println("✓ Rider search area added: " + addedRiderArea + " km");
    }

    @Test(priority = 9, dependsOnMethods = "testAddRiderSearchArea", description = "Add rider batch")
    public void testAddRiderBatch() throws InterruptedException {
        System.out.println("Test: Add Rider Batch");
        
        WebElement riderBatchAddButton = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("//h6[text()='Rider Batches']/following-sibling::button")
        ));
        riderBatchAddButton.click();
        Thread.sleep(1000);
        
        List<WebElement> riderBatchInputs = wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(
            By.xpath("//input[@placeholder='Enter Rider Batch']")
        ));
        
        WebElement latestRiderBatchInput = riderBatchInputs.get(riderBatchInputs.size() - 1);
        int riderBatchValue = ThreadLocalRandom.current().nextInt(1, 11);
        latestRiderBatchInput.sendKeys(String.valueOf(riderBatchValue));
        Thread.sleep(1000);
        latestRiderBatchInput.sendKeys(Keys.TAB);
        
        List<WebElement> delayTimeInputs = wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(
            By.xpath("//input[contains(@name,'delayTime')]")
        ));
        WebElement latestDelayTimeInput = delayTimeInputs.get(delayTimeInputs.size() - 1);
        int delayTimeValue = ThreadLocalRandom.current().nextInt(8, 16);
        latestDelayTimeInput.sendKeys(String.valueOf(delayTimeValue));
        
        takeScreenshot("10_rider_batch_added.png");
        System.out.println("✓ Rider batch added - Batch: " + riderBatchValue + ", Delay: " + delayTimeValue + " min");
    }

    @Test(priority = 10, dependsOnMethods = "testAddRiderBatch", description = "Save all changes")
    public void testSaveChanges() throws InterruptedException {
        System.out.println("Test: Save Changes");
        
        WebElement saveButton = wait.until(ExpectedConditions.elementToBeClickable(
            By.xpath("//button[contains(text(),'Save Changes')]")
        ));
        
        scrollToElement(saveButton);
        waitAndClick(saveButton);
        
        Thread.sleep(3000); // Wait for save operation
        takeScreenshot("11_changes_saved.png");
        System.out.println("✓ All changes saved successfully");
    }

    @Test(priority = 11, dependsOnMethods = "testSaveChanges", description = "Verify and delete added unit")
    public void testDeleteAddedUnit() throws InterruptedException {
        System.out.println("Test: Delete Added Unit");
        
        js.executeScript("window.scrollBy(0, -600);");
        Thread.sleep(2000);
        
        try {
            WebElement deleteIcon = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//div[text()='" + addedUnit + "']/following-sibling::*[name()='svg']")
            ));
            
            waitAndClick(deleteIcon);
            Thread.sleep(2000);
            takeScreenshot("12_unit_deleted.png");
            System.out.println("✓ Unit deleted successfully: " + addedUnit);
        } catch (TimeoutException e) {
            System.out.println("⚠ Unit delete icon not found, may have been already removed");
        }
    }

    @Test(priority = 12, dependsOnMethods = "testDeleteAddedUnit", description = "Verify and delete added rider area")
    public void testDeleteAddedRiderArea() throws InterruptedException {
        System.out.println("Test: Delete Added Rider Area");
        
        try {
            WebElement deleteIcon = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//div[text()='" + addedRiderArea + "']/following-sibling::*[name()='svg'] | " +
                        "//span[text()='" + addedRiderArea + "']/following-sibling::*[name()='svg']")
            ));
            
            waitAndClick(deleteIcon);
            Thread.sleep(2000);
            takeScreenshot("13_rider_area_deleted.png");
            System.out.println("✓ Rider area deleted successfully: " + addedRiderArea + " km");
        } catch (TimeoutException e) {
            System.out.println("⚠ Rider area delete icon not found, may have been already removed");
        }
    }

    @Test(priority = 13, dependsOnMethods = "testDeleteAddedRiderArea", description = "Delete rider batch and final save")
    public void testDeleteRiderBatchAndFinalSave() throws InterruptedException {
        System.out.println("Test: Delete Rider Batch and Final Save");
        
        js.executeScript("window.scrollBy(0, 600);");
        Thread.sleep(2000);
        
        try {
            WebElement deleteButton = wait.until(ExpectedConditions.elementToBeClickable(
                By.cssSelector("button.css-19sp94p")
            ));
            
            waitAndClick(deleteButton);
            Thread.sleep(2000);
            
            WebElement finalSaveButton = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//button[contains(text(),'Save Changes')]")
            ));
            
            waitAndClick(finalSaveButton);
            Thread.sleep(3000);
            
            takeScreenshot("14_final_cleanup_completed.png");
            System.out.println("✓ Rider batch deleted and final save completed");
        } catch (TimeoutException e) {
            System.out.println("⚠ Rider batch delete button not found");
        }
        
        // Return to top of page
        actions.keyDown(Keys.CONTROL).sendKeys(Keys.HOME).keyUp(Keys.CONTROL).perform();
        Thread.sleep(2000);
    }

    // Additional validation tests
    @Test(priority = 14, description = "Verify monthly target accepts numbers only")
    public void testMonthlyTargetValidation() throws InterruptedException {
        System.out.println("Test: Monthly Target Validation");
        
        WebElement monthlyTargetInput = wait.until(ExpectedConditions.visibilityOfElementLocated(
            By.name("businessDevelopmentSetting.monthlyShopTarget")
        ));
        
        // Test with letters
        monthlyTargetInput.clear();
        monthlyTargetInput.sendKeys("abc");
        String valueAfterLetters = monthlyTargetInput.getAttribute("value");
        
        // Test with numbers
        monthlyTargetInput.clear();
        monthlyTargetInput.sendKeys("123");
        String valueAfterNumbers = monthlyTargetInput.getAttribute("value");
        
        Assert.assertTrue(valueAfterLetters.isEmpty() || valueAfterLetters.matches("\\d*"), 
            "Monthly target should not accept letters");
        Assert.assertEquals(valueAfterNumbers, "123", "Monthly target should accept numbers");
        
        takeScreenshot("15_monthly_target_validation.png");
        System.out.println("✓ Monthly target validation passed");
    }

    @Test(priority = 15, description = "Verify reward prize accepts numbers only")
    public void testRewardPrizeValidation() throws InterruptedException {
        System.out.println("Test: Reward Prize Validation");
        
        WebElement rewardPrizeInput = wait.until(ExpectedConditions.visibilityOfElementLocated(
            By.name("businessDevelopmentSetting.monthlyRewardPrize")
        ));
        
        // Test with letters
        rewardPrizeInput.clear();
        rewardPrizeInput.sendKeys("xyz");
        String valueAfterLetters = rewardPrizeInput.getAttribute("value");
        
        // Test with numbers
        rewardPrizeInput.clear();
        rewardPrizeInput.sendKeys("456");
        String valueAfterNumbers = rewardPrizeInput.getAttribute("value");
        
        Assert.assertTrue(valueAfterLetters.isEmpty() || valueAfterLetters.matches("\\d*"), 
            "Reward prize should not accept letters");
        Assert.assertEquals(valueAfterNumbers, "456", "Reward prize should accept numbers");
        
        takeScreenshot("16_reward_prize_validation.png");
        System.out.println("✓ Reward prize validation passed");
    }

    @Test(priority = 16, description = "Test payment method selection")
    public void testPaymentMethodSelection() throws InterruptedException {
        System.out.println("Test: Payment Method Selection");
        
        try {
            WebElement cashButton = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//button[contains(text(),'Cash')]")
            ));
            
            WebElement cardButton = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//button[contains(text(),'Card')]")
            ));
            
            // Test toggling payment methods
            String cashClassBefore = cashButton.getAttribute("class");
            cashButton.click();
            Thread.sleep(500);
            String cashClassAfter = cashButton.getAttribute("class");
            
            Assert.assertNotEquals(cashClassBefore, cashClassAfter, "Cash payment method should toggle");
            
            takeScreenshot("17_payment_methods_tested.png");
            System.out.println("✓ Payment method selection tested");
        } catch (TimeoutException e) {
            System.out.println("⚠ Payment method buttons not found on current view");
        }
    }

    // Summary method to display test results
    @AfterMethod
    public void logTestResult(ITestResult result) {
        String testName = result.getMethod().getMethodName();
        if (result.getStatus() == ITestResult.SUCCESS) {
            System.out.println("✓ PASSED: " + testName);
        } else if (result.getStatus() == ITestResult.FAILURE) {
            System.out.println("✗ FAILED: " + testName + " - " + result.getThrowable().getMessage());
        } else if (result.getStatus() == ITestResult.SKIP) {
            System.out.println("⊘ SKIPPED: " + testName);
        }
    }
}