import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.time.Duration;

public class lyxaConsole {

    public static void main(String[] args) {
        System.setProperty("webdriver.chrome.driver",
                "C:\\Users\\quazi\\Downloads\\Automation web\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe");

        ChromeOptions options = new ChromeOptions();
        options.addArguments("--incognito");

        WebDriver driver = new ChromeDriver(options);
        driver.manage().window().maximize();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10)); // longer timeout for stability

        try {
            System.out.println("Navigating to login page...");
            driver.get("https://test-v2-panel.lyxa.ai/auth/sign-in?returnTo=%2F&loginAs=admin");
            takeScreenshot(driver, "screenshots/0_login_page.png");

            System.out.println("üîê Logging in...");

            clearAndType(findElement(wait, driver,
                    By.name("email"),
                    By.xpath("//input[contains(@placeholder,'email') or contains(@placeholder,'Email')]"),
                    By.xpath("//input[@type='text' or @type='email']")),
                    "nour@gmail.com");
            Thread.sleep(1000);
            
            clearAndType(findElement(wait, driver,
                    By.name("password"),
                    By.id("password"),
                    By.xpath("//input[@type='password']"),
                    By.xpath("//input[contains(@placeholder,'password') or contains(@placeholder,'Password')]")),
                    "Nour1234@");
            Thread.sleep(1000);
            
            findElement(wait, driver,
                    By.cssSelector("button[type='submit']"),
                    By.xpath("//button[contains(text(),'Sign') or contains(text(),'Login') or contains(text(),'Submit')]"),
                    By.xpath("//input[@type='submit']"),
                    By.xpath("//button[@type='submit' or contains(@class,'submit') or contains(@class,'login')]")
            ).click();

            System.out.println("Waiting for login confirmation...");
            if (isLoginSuccessful(wait, driver)) {
                takeScreenshot(driver, "screenshots/1_lyxa_login_success.png");
                System.out.println("‚úÖ Login successful");
                
                Thread.sleep(2000);

                // Click top-left menu button
                WebElement menuButton = wait.until(ExpectedConditions.elementToBeClickable(
                        By.xpath("(//button[contains(@class,'MuiIconButton-root')])[1]")
                ));
                menuButton.click();
                System.out.println("üìÇ Menu button clicked");
                takeScreenshot(driver, "screenshots/2_menu_opened.png");

                // Click the "Settings" menu item
                WebElement settingsMenuItem = wait.until(ExpectedConditions.elementToBeClickable(
                        By.xpath("//span[@class='mnl__nav__item__title MuiBox-root css-0' and text()='Settings']")
                ));
                
                Thread.sleep(2000);
                
                settingsMenuItem.click();
                System.out.println("‚öôÔ∏è Settings menu item clicked");
                takeScreenshot(driver, "screenshots/3_settings_page.png");
                
             // Click the "Settings" menu item
                WebElement settingsMenuItems = wait.until(ExpectedConditions.elementToBeClickable(
                    By.xpath("//span[@class='mnl__nav__item__title MuiBox-root css-0' and text()='Settings']")
                ));
                settingsMenuItems.click();
                System.out.println("‚öôÔ∏è Settings clicked");

                Thread.sleep(2500);

                // Click "Default Chat Messages"
                WebElement defaultChatMessages = wait.until(ExpectedConditions.elementToBeClickable(
                    By.xpath("//div[@class='MuiBox-root css-171onha' and text()='Default Chat Messages']")
                ));
                defaultChatMessages.click();
                System.out.println("üìÇ Default Chat Messages opened");
                Thread.sleep(2000);
             
                WebElement addChatMessageBtn = wait.until(ExpectedConditions.elementToBeClickable(
                	    By.xpath("//button[contains(text(),'Add Chat Message')]")
                	));
                addChatMessageBtn.click();
                System.out.println("Add Chat Message clicked");

                // Wait for text area to be visible (not the hidden one)
                WebElement messageTextarea = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    By.xpath("//textarea[not(@readonly)]")
                ));

                // Type a random short message
                String randomMessage = "Test msg " + System.currentTimeMillis();
                messageTextarea.sendKeys(randomMessage);
                System.out.println("‚úèÔ∏è Message typed: " + randomMessage);

                // Click "Add" button to submit
                WebElement addButton = wait.until(ExpectedConditions.elementToBeClickable(
                		By.xpath("//button[@type='submit']")
                ));
                addButton.click();
                System.out.println("Chat message added");

                // Optional: Wait a bit to see result before closing
                Thread.sleep(2000);


            } else {
                System.out.println("‚ùå Login confirmation failed.");
                takeScreenshot(driver, "screenshots/login_failed.png");
            }

        } catch (Exception e) {
            System.out.println("‚ùå Test failed: " + e.getMessage());
            try {
                takeScreenshot(driver, "screenshots/error_screenshot.png");
            } catch (Exception ignored) {
            }
        } finally {
            if (driver != null) {
                driver.quit();
                System.out.println("Browser closed");
            }
        }
    }

    // Reusable element finder with multiple locators
    private static WebElement findElement(WebDriverWait wait, WebDriver driver, By... locators) {
        for (By locator : locators) {
            try {
                return wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
            } catch (Exception ignored) {
            }
        }
        throw new NoSuchElementException("Element not found with given locators");
    }

    // Clear & type method
    private static void clearAndType(WebElement element, String text) {
        element.sendKeys(Keys.CONTROL + "a", Keys.DELETE);
        element.sendKeys(text);
    }

    // Faster login confirmation with parallel conditions
    private static boolean isLoginSuccessful(WebDriverWait wait, WebDriver driver) {
        try {
            wait.until(ExpectedConditions.or(
                    ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[contains(text(),'Dashboard')]")),
                    ExpectedConditions.urlContains("dashboard"),
                    ExpectedConditions.not(ExpectedConditions.urlContains("sign-in"))
            ));
            return true;
        } catch (TimeoutException e) {
            return false;
        }
    }

    // Screenshot method
    private static void takeScreenshot(WebDriver driver, String filePath) throws Exception {
        try {
            File src = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            File dest = new File(filePath);
            dest.getParentFile().mkdirs();
            FileUtils.copyFile(src, dest);
            System.out.println("üì∏ Screenshot saved: " + filePath);
        } catch (Exception e) {
            System.out.println("Failed to take screenshot: " + e.getMessage());
            throw new Exception("Screenshot failed", e);
        }
    }
}
